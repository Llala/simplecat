// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: source_unit.sql

package db

import (
	"context"
	"database/sql"
)

const createSourceUnit = `-- name: CreateSourceUnit :one
INSERT INTO source_unit (
  application_id,
  translation_unit_id,
  text
) VALUES (
  $1, NULL, $2
)
RETURNING id, application_id, translation_unit_id, text
`

type CreateSourceUnitParams struct {
	ApplicationID int32          `json:"application_id"`
	Text          sql.NullString `json:"text"`
}

func (q *Queries) CreateSourceUnit(ctx context.Context, arg CreateSourceUnitParams) (SourceUnit, error) {
	row := q.db.QueryRowContext(ctx, createSourceUnit, arg.ApplicationID, arg.Text)
	var i SourceUnit
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.TranslationUnitID,
		&i.Text,
	)
	return i, err
}

const deleteSourceUnit = `-- name: DeleteSourceUnit :exec
DELETE FROM source_unit
WHERE id = $1
`

func (q *Queries) DeleteSourceUnit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSourceUnit, id)
	return err
}

const getSourceUnit = `-- name: GetSourceUnit :one
SELECT id, application_id, translation_unit_id, text FROM source_unit
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSourceUnit(ctx context.Context, id int64) (SourceUnit, error) {
	row := q.db.QueryRowContext(ctx, getSourceUnit, id)
	var i SourceUnit
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.TranslationUnitID,
		&i.Text,
	)
	return i, err
}

const listSourceUnits = `-- name: ListSourceUnits :many
SELECT id, application_id, translation_unit_id, text FROM source_unit
WHERE application_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListSourceUnitsParams struct {
	ApplicationID int32 `json:"application_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListSourceUnits(ctx context.Context, arg ListSourceUnitsParams) ([]SourceUnit, error) {
	rows, err := q.db.QueryContext(ctx, listSourceUnits, arg.ApplicationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SourceUnit{}
	for rows.Next() {
		var i SourceUnit
		if err := rows.Scan(
			&i.ID,
			&i.ApplicationID,
			&i.TranslationUnitID,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSourceUnit = `-- name: UpdateSourceUnit :one

UPDATE source_unit
SET
  translation_unit_id = COALESCE($1, translation_unit_id),
  text = COALESCE($2, text)
WHERE
  id = $3
RETURNING id, application_id, translation_unit_id, text
`

type UpdateSourceUnitParams struct {
	TranslationUnitID sql.NullInt32  `json:"translation_unit_id"`
	Text              sql.NullString `json:"text"`
	ID                int64          `json:"id"`
}

func (q *Queries) UpdateSourceUnit(ctx context.Context, arg UpdateSourceUnitParams) (SourceUnit, error) {
	row := q.db.QueryRowContext(ctx, updateSourceUnit, arg.TranslationUnitID, arg.Text, arg.ID)
	var i SourceUnit
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.TranslationUnitID,
		&i.Text,
	)
	return i, err
}
